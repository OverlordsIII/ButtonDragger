package io.github.overlordsiii.buttondragger.config;

import com.google.common.collect.Maps;
import io.github.overlordsiii.buttondragger.mixin.AbstractButtonWidetInvoker;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.client.gui.widget.AbstractButtonWidget;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.Properties;

@Environment(EnvType.CLIENT)
public class ButtonDraggerConfig {
    private Map<String, String> stringEntries = Maps.newHashMap();
    private Map<String, Integer> intEntries = Maps.newHashMap();
    private Map<String, Boolean> boolEntries = Maps.newHashMap();

    private Path configPath;

    public ButtonDraggerConfig(Path configFolder){
        configPath = configFolder.resolve("buttondragger.properties");
    }

    public void createAndLoadProperties(){
        try {
            deserialize();
            serialize();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void deserialize() throws IOException {
        if (!configPath.toFile().exists()){
            return;
        }
        Properties properties = new Properties();
        properties.load(Files.newInputStream(configPath));
        properties.forEach((key, value) -> {
            if (intEntries.containsKey(key.toString())) {
                Integer val = Integer.parseInt(value.toString());
                intEntries.replace(key.toString(), val);
            } else {
                intEntries.put(key.toString(), Integer.parseInt(value.toString()));
            }
        });
    }

    public void serialize() throws IOException {
        Properties properties = new Properties();
        intEntries.keySet().forEach(string -> properties.setProperty(string, intEntries.get(string).toString()));
        properties.store(Files.newOutputStream(configPath), "This file is used to parse ButtonDragger button positions. DO NOT EDIT THIS FILE. IT IS USED BY THE MOD TO STORE THE POSITIONS FOR THE BUTTONS");
    }

    public ButtonDraggerConfig addIntEntry(String name, Integer defaultValue){
        intEntries.put(name, defaultValue);
        return this;
    }

    public int getIntEntry(String name){
        return intEntries.get(name);
    }

    public boolean getBoolEntry(String name){
        return boolEntries.get(name);
    }

    public ButtonDraggerConfig setStringEntry(String name, String newValue){
        this.stringEntries.replace(name, newValue);
        return this;
    }

    public ButtonDraggerConfig setIntEntry(String name, int newValue){
        this.intEntries.replace(name, newValue);
        return this;
    }

    public ButtonDraggerConfig setBoolEntry(String name, boolean newValue){
        this.boolEntries.replace(name, newValue);
        return this;
    }
    public ButtonDraggerConfig addButtonEntry(String name, int x, int y){
        if (!this.intEntries.containsKey(name + ".x") && !this.intEntries.containsKey(name + ".y")) {
            this.intEntries.put(name + ".x", x);
            this.intEntries.put(name + ".y", y);
        }
        return this;
    }

    public Map<String, Integer> getIntEntries() {
        return intEntries;
    }

    public int getButtonPosX(AbstractButtonWidget widget){
        if (this.intEntries.containsKey(widget.getMessage().getString() + ".x") || this.intEntries.containsKey(((AbstractButtonWidetInvoker)widget).invokeGetNarrationMessage().getString() + ".x")) {
            return this.intEntries.get((widget.getMessage().getString().isEmpty() ? ((AbstractButtonWidetInvoker)widget).invokeGetNarrationMessage().getString() : widget.getMessage().getString()) + ".x");
        }
        return widget.x;
    }
    public int getButtonPosY(AbstractButtonWidget widget){
        if (this.intEntries.containsKey(widget.getMessage().getString() + ".y") || this.intEntries.containsKey(((AbstractButtonWidetInvoker)widget).invokeGetNarrationMessage().getString() + ".y")) {
            return this.intEntries.get((widget.getMessage().getString().isEmpty() ? ((AbstractButtonWidetInvoker)widget).invokeGetNarrationMessage().getString() : widget.getMessage().getString()) + ".y");
        }
        return widget.y;
    }
}
